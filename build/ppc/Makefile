# makefile for pForth
# Portable Forth written in 'C'
# by Phil Burk
# For more info visit http://www.softsynth.com/pforth/
#
# See "help" target below.

.POSIX:

# Options include: PF_SUPPORT_FP PF_NO_MALLOC PF_NO_INIT PF_DEBUG
# See "docs/pf_ref.htm" file for more info.

# PPC Cross Compiler
X            ?= powerpc64-linux-gnu-
XCC          = $(X)gcc
XLD          = $(X)ld
XOBJCP       = $(X)objcopy

SRCDIR       = ../..
PFORTHDIR    = $(SRCDIR)
CSRCDIR      = $(PFORTHDIR)/csrc
FTHDIR       = $(PFORTHDIR)/fth

PFDICAPP     = pforth
PFORTHDIC    = pforth.dic
PFDICDAT     = pfdicdat.h
PFORTHAPP    = pforth_standalone
PFORTHBIN    = pforth.bin

# This is needed to get pForth to build on Snow Leopard and other 64 bit platforms.
WIDTHOPT=

FULL_WARNINGS =  \
        --std=c89 \
        -fsigned-char \
        -fno-builtin \
        -fno-unroll-loops \
        -fno-keep-inline-functions \
        -pedantic \
        -Wcast-qual \
        -Wall \
        -Wwrite-strings \
        -Winline  \
        -Wmissing-prototypes \
        -Wmissing-declarations

DEBUGOPTS = -g
CCOPTS = $(WIDTHOPT) -x c $(FULL_WARNINGS) $(EXTRA_CCOPTS) $(DEBUGOPTS)

IO_SOURCE = pf_io_stdio.c pf_fileio_stdio.c
XIO_SOURCE = pf_io_ppc.c

EMBCCOPTS = -DPF_EMBEDDED -DPF_STATIC_DIC -DPF_USE_STATIC_DIC -DPF_MEM_POOL_SIZE=0x80000

#######################################
PFINCLUDES = pf_all.h pf_cglue.h pf_clib.h pf_core.h pf_float.h \
	pf_guts.h pf_host.h pf_inc1.h pf_io.h pf_mem.h pf_save.h \
	pf_text.h pf_types.h pf_win32.h pf_words.h pfcompfp.h \
	pfcompil.h pfdicdat_arm.h pfinnrfp.h pforth.h
PFBASESOURCE = pf_cglue.c pf_clib.c pf_core.c pf_inner.c \
	pf_io.c pf_io_none.c pf_main.c pf_mem.c pf_save.c \
	pf_text.c pf_words.c pfcompil.c pfcustom.c
PFSOURCE = $(PFBASESOURCE) $(IO_SOURCE)
XPFSOURCE = $(PFBASESOURCE) $(XIO_SOURCE)

XLDADD = head.eo

VPATH = .:$(CSRCDIR):$(CSRCDIR)/posix:$(CSRCDIR)/stdio:$(CSRCDIR)/ppc

XCFLAGS = $(CCOPTS)
XCFLAGS += -msoft-float -mno-string -mno-multiple -mno-vsx -mno-altivec -mlittle-endian -fno-stack-protector -mstrict-align -ffreestanding
XCFLAGS += -Os
XCFLAGS += -fdata-sections -ffunction-sections
XCPPFLAGS = -I.
XLDFLAGS = $(WIDTHOPT) -N -T powerpc.lds

XCOMPILE = $(XCC) $(XCFLAGS) $(XCPPFLAGS)
XLINK = $(XLD) $(XLDFLAGS)

CFLAGS = $(CCOPTS) -Os
CPPFLAGS = -I. -D_DEFAULT_SOURCE -D_GNU_SOURCE
LDFLAGS = $(WIDTHOPT)

COMPILE = $(CC) $(CFLAGS) $(CPPFLAGS)
LINK = $(CC) $(LDFLAGS)

.SUFFIXES: .c .o .eo

PFOBJS     = $(PFSOURCE:.c=.o)
PFEMBOBJS  = $(XPFSOURCE:.c=.eo)

.c.o: $(PFINCLUDES)
	$(COMPILE) -c -o $@ $<

.c.eo: $(PFINCLUDES) pfdicdat.h
	$(XCOMPILE) $(EMBCCOPTS) -c -o $@ $<

.PHONY: all clean test
.PHONY: help pffiles pfdicapp pfdicdat pforthapp

all: $(PFORTHBIN)

pffiles:
	@echo "INCLUDE FILES -----------------"
	@echo ${PFINCLUDES}
	@echo "'C' FILES ---------------------"
	@echo ${PFSOURCE}
	@echo "OBJECT FILES ------------------"
	@echo ${PFOBJS}
	@echo "EMBEDDED OBJECT FILES ------------------"
	@echo ${PFEMBOBJS}

# Build pforth by compiling 'C' source.
$(PFDICAPP): $(PFINCLUDES) $(PFOBJS)
	$(LINK) -lm -o $@ $(PFOBJS) $(LDADD)

# Build basic dictionary image by running newly built pforth and including "system.fth".
$(PFORTHDIC): $(PFDICAPP)
	wd=$$(pwd); (cd $(FTHDIR); $${wd}/$(PFDICAPP) -i system.fth)
	(cd $(FTHDIR); cat pforth.dic; rm -f pforth.dic) > $@

$(PFDICDAT): $(PFORTHDIC) $(PFDICAPP)
	echo 'include $(FTHDIR)/savedicd.fth SDAD BYE' | ./$(PFDICAPP) -d $(PFORTHDIC)

head.eo : head.S
	$(XCC) $< -c -o head.eo

$(PFORTHAPP): $(PFDICDAT) $(PFEMBOBJS) $(XLDADD)
	$(XLINK) -o $@ $(PFEMBOBJS) $(XLDADD)
	@echo ""
	@echo "Standalone pForth executable written to $(PFORTHAPP)"

$(PFORTHBIN): $(PFORTHAPP)
	@echo "BINARY COPY"
	$(XOBJCP) -O binary $(PFORTHAPP) pforth.bin

# target aliases
pfdicapp: $(PFDICAPP)

pfdicdat: $(PFDICDAT)

pforthapp: $(PFORTHAPP)

pforthbin: $(PFORTHBIN)

help:
	@echo "Use 'make all' to build standalone pForth executable."
	@echo "PForth can be built in several stages using these targets:"
	@echo "   pfdicapp = executable pForth with minimal dictionary. All from 'C'."
	@echo "   pfdicdat = image of full dictionary build by compiling Forth code."
	@echo "   pforthapp = executable with embedded dictionary image. "
	@echo "   pforthbin = binary with embedded dictionary image. DEFAULT 'all' target."
	@echo ""
	@echo "   The file 'fth/pfdicdat.h' is generated by pForth. It contains a binary image of the Forth dictionary."
	@echo "   It allows pForth to work as a standalone image that does not need to load a dictionary file."

test: $(PFORTHAPP)
	wd=$$(pwd); (cd $(FTHDIR); $${wd}/$(PFORTHAPP) -q t_corex.fth)
	wd=$$(pwd); (cd $(FTHDIR); $${wd}/$(PFORTHAPP) -q t_strings.fth)
	wd=$$(pwd); (cd $(FTHDIR); $${wd}/$(PFORTHAPP) -q t_locals.fth)
	wd=$$(pwd); (cd $(FTHDIR); $${wd}/$(PFORTHAPP) -q t_alloc.fth)
	wd=$$(pwd); (cd $(FTHDIR); $${wd}/$(PFORTHAPP) -q t_floats.fth)
	wd=$$(pwd); (cd $(FTHDIR); $${wd}/$(PFORTHAPP) -q t_file.fth)

clean:
	rm -f $(PFOBJS) $(PFEMBOBJS)
	rm -f $(PFORTHAPP)
	rm -f $(PFDICDAT) $(FTHDIR)/$(PFDICDAT)
	rm -f $(PFORTHDIC) $(FTHDIR)/$(PFORTHDIC)
	rm -f $(PFDICAPP)
	rm -f $(PFORTHBIN)
	rm -f head.eo
